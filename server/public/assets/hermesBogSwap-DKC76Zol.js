import{dd as s,bz as p,cW as a,d7 as h,d8 as g,cq as x}from"./index-Di4TKO3l.js";const v=["function swap(address tokenIn, address tokenOut, uint256 amountIn) external payable","function swapBNBToHERMES() external payable","function swapHERMESToBNB(uint256 amount) external payable","function estimateSwap(address tokenIn, address tokenOut, uint256 amountIn) external view returns (uint256 estimatedOut)","function getContractInfo() external view returns (uint256 hermesBalance, uint256 bnbBalance, uint256 swapCount, uint256 rewardsDistributed, uint256 feesCollected, bool canReward)","function getRewardBalance() external view returns (uint256)","function totalSwaps() external view returns (uint256)","function totalRewardsDistributed() external view returns (uint256)","function totalFeesCollected() external view returns (uint256)","function depositRewards(uint256 amount) external","event SwapExecuted(address indexed user, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut, uint256 reward)","event RewardPaid(address indexed user, uint256 amount)","event FeeCollected(uint256 amount)","event FeeTransferred(address to, uint256 amount)"];class S{constructor(){this.provider=null,this.signer=null,this.contract=null}async initialize(e,t){this.provider=e,this.signer=t,s.length>0&&(this.contract=new p(s,v,t))}async getContractStatus(){if(!this.contract)throw new Error("HermesBogSwap3 contract not deployed yet");try{const e=await this.contract.getContractInfo();return{hermesBalance:a(e[0]),bnbBalance:a(e[1]),swapCount:e[2].toString(),rewardsDistributed:a(e[3]),feesCollected:a(e[4]),canReward:e[5]}}catch(e){throw console.error("Error getting contract status:",e),e}}async universalSwap(e,t,r,o){if(!this.contract)throw new Error("HermesBogSwap3 contract not deployed yet");try{const n=await this.getContractStatus();console.log("Contract Status Before Swap:",n),parseFloat(n.hermesBalance)<1e5&&(console.warn("⚠️ CRITICAL: Contract has insufficient HERMES tokens for rewards!"),console.warn(`Current HERMES balance: ${n.hermesBalance}`)),console.log(`Executing universal swap: ${e} -> ${t} via HermesBogSwap3...`);const d=e==="BNB"?"0x0000000000000000000000000000000000000000":e,f=t==="BNB"?"0x0000000000000000000000000000000000000000":t,l=h("0.0005");let c=l,i="0";if(e==="BNB")c=h(r)+l,i="0";else{i=g(r,18),c=l;const B=["function approve(address spender, uint256 amount) external returns (bool)","function allowance(address owner, address spender) external view returns (uint256)","function balanceOf(address account) external view returns (uint256)","function decimals() external view returns (uint8)"],w=new p(d,B,this.signer);if(await w.allowance(await this.signer.getAddress(),s)<i){console.log("⚠️ İlk defa token swap: Önce MAX onay gerekiyor, sonraki swaplar tek işlem olacak");const m=x;await(await w.approve(s,m)).wait(),console.log("✅ MAX Onay tamamlandı - Artık TÜM gelecek swaplar tek işlem olacak!"),o&&o()}}console.log(`Executing swap with ${a(c)} BNB (includes 0.0005 BNB fee automatically transferred)...`);const u=await this.contract.swap(d,f,i,{value:c,gasLimit:8e5});return await u.wait(),console.log(`✅ Universal swap completed: ${u.hash}`),console.log("✅ Fee automatically transferred to 0xd88026A648C95780e3056ed98eD60E5105cc4863"),u.hash}catch(n){throw console.error("HermesBogSwap3 universal swap failed:",n),n}}async swapBNBToToken(e,t){return this.universalSwap("BNB",e,t)}async swapTokenToBNB(e,t){return this.universalSwap(e,"BNB",t)}async swapTokenToToken(e,t,r){return this.universalSwap(e,t,r)}async getContractInfo(){if(!this.contract)throw new Error("Contract not initialized");try{const[e,t,r,o,n]=await this.contract.getContractInfo();return{hermesBalance:a(e),bnbBalance:a(t),swapCount:Number(r),rewardsDistributed:a(o),canReward:n}}catch(e){throw console.error("Failed to get contract info:",e),e}}isContractDeployed(){return this.contract!==null&&s!=="0x0000000000000000000000000000000000000000"}async getClaimableRewards(e){return"0"}async checkHealth(){try{const e=await this.getContractInfo();return{isHealthy:!0,contractBNB:e.bnbBalance,contractHermes:e.hermesBalance,canReward:e.canReward}}catch(e){return{isHealthy:!1,contractBNB:"0",contractHermes:"0",canReward:!1,lastError:e instanceof Error?e.message:"Unknown error"}}}}const k=new S;export{S as HermesBogSwapService,k as hermesBogSwapService};
