# 🚀 StakeFarm Deployment & Integration Guide

## 📋 OVERVIEW
Bu rehber, mevcut Hermes AI Swap sisteminizi **bozmadan** StakeFarm modülünü nasıl entegre edeceğinizi açıklar.

## ⚠️ KRİTİK NOKTALAR

### ✅ Sistemizi Bozmayacak Yaklaşım:
- **Yeni contract deploy edilecek** (mevcut contract'a dokunmayacağız)
- **Ayrı frontend component** (mevcut SwapInterface'e müdahale yok)
- **Bağımsız backend routes** (mevcut API'lara dokunmayacağız)
- **Treasury wallet otomasyonu** (0xd88026A648C95780e3056ed98eD60E5105cc4863)

## 🔧 STEP 1: Smart Contract Deployment

### A) Contract Deploy Etme
```bash
# 1. Hardhat/Truffle setup
npm install --save-dev hardhat @openzeppelin/contracts

# 2. Deploy script oluştur
# deploy/stakeFarm.js
const { ethers } = require("hardhat");

async function main() {
  const StakeFarm = await ethers.getContractFactory("StakeFarm");
  const stakeFarm = await StakeFarm.deploy();
  await stakeFarm.deployed();
  
  console.log("StakeFarm deployed to:", stakeFarm.address);
  
  // Verify contract on BSCScan
  await hre.run("verify:verify", {
    address: stakeFarm.address,
    constructorArguments: [],
  });
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
```

### B) Deploy Komutu
```bash
# BSC Mainnet'e deploy
npx hardhat run deploy/stakeFarm.js --network bsc

# BSC Testnet'e deploy (test için)
npx hardhat run deploy/stakeFarm.js --network bscTestnet
```

## 🏗️ STEP 2: Frontend Integration

### A) Dosya Yapısı (Mevcut yapıyı bozmadan)
```
hermes-ai-swap-current/
├── client/src/
│   ├── components/
│   │   ├── SwapInterface.tsx          [DOKUNMİYORUZ]
│   │   └── StakeFarm.tsx              [YENİ EKLE]
│   ├── pages/
│   │   ├── index.tsx                  [DOKUNMİYORUZ]
│   │   └── stake.tsx                  [YENİ EKLE]
│   ├── lib/
│   │   ├── hermesSwap.ts              [DOKUNMİYORUZ]
│   │   └── stakeFarmContract.ts       [YENİ EKLE]
│   └── constants/
│       └── stakeFarm.ts               [YENİ EKLE]
```

### B) Contract Constants (YENİ DOSYA)
```typescript
// client/src/constants/stakeFarm.ts
export const STAKE_FARM_CONFIG = {
  CONTRACT_ADDRESS: "0x...", // Deploy edildikten sonra doldur
  TREASURY_WALLET: "0xd88026A648C95780e3056ed98eD60E5105cc4863",
  
  // Token addresses
  USDT_ADDRESS: "0x55d398326f99059fF775485246999027B3197955",
  CAKE_ADDRESS: "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",
  
  // Fees
  STAKE_FEE: "0.0008",
  CLAIM_FEE: "0.008",
  UNSTAKE_FEE: "0.0008",
  
  // Staking parameters
  LOCK_PERIOD_DAYS: 99,
  APY_PERCENTAGE: 22,
  
  // Contract ABI
  ABI: [
    // ... (yukarıdaki ABI'yi buraya kopyala)
  ]
};
```

### C) Next.js Page Router (YENİ DOSYA)
```typescript
// client/src/pages/stake.tsx
import { NextPage } from 'next';
import StakeFarm from '@/components/StakeFarm';
import Layout from '@/components/Layout'; // Mevcut layout'u kullan

const StakePage: NextPage = () => {
  return (
    <Layout>
      <StakeFarm />
    </Layout>
  );
};

export default StakePage;
```

### D) Navigation Menu'ye Ekleme (MİNİMUM DEĞİŞİKLİK)
```typescript
// components/Navigation.tsx veya Header.tsx
// Sadece navigation linklerine ekle:

const navItems = [
  { name: 'Swap', href: '/' },           // Mevcut
  { name: 'Stake Farm', href: '/stake' }, // YENİ EKLE
  // ... diğer linkler
];
```

## 🔄 STEP 3: Backend Integration (Opsiyonel)

### A) Stake Farm API Routes (YENİ DOSYA)
```javascript
// server/routes/stakeFarm.js
const express = require('express');
const { ethers } = require('ethers');
const router = express.Router();

// BSC provider
const provider = new ethers.providers.JsonRpcProvider('https://bsc-dataseed.binance.org/');

// Stake Farm contract
const stakeFarmContract = new ethers.Contract(
  process.env.STAKE_FARM_ADDRESS,
  STAKE_FARM_ABI,
  provider
);

// Get user stakes
router.get('/user-stakes/:address', async (req, res) => {
  try {
    const { address } = req.params;
    const stakes = await stakeFarmContract.getUserStakes(address);
    res.json({ success: true, stakes });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// Get total pending rewards
router.get('/pending-rewards/:address', async (req, res) => {
  try {
    const { address } = req.params;
    const pending = await stakeFarmContract.getTotalPendingRewards(address);
    res.json({ success: true, pendingRewards: pending.toString() });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

module.exports = router;
```

### B) Main Server'a Route Ekleme (MİNİMUM DEĞİŞİKLİK)
```javascript
// server/index.js
// Sadece bu satırları ekle:

const stakeFarmRoutes = require('./routes/stakeFarm');
app.use('/api/stakefarm', stakeFarmRoutes);

// Mevcut kodlara dokunma!
```

## 💾 STEP 4: Environment Variables

### A) .env Dosyasına Ekle
```bash
# .env (mevcut değişkenlere ek olarak)

# StakeFarm Contract
STAKE_FARM_ADDRESS=0x... # Deploy edildikten sonra doldur
TREASURY_WALLET=0xd88026A648C95780e3056ed98eD60E5105cc4863

# BSC Network
BSC_RPC_URL=https://bsc-dataseed.binance.org/
BSC_CHAIN_ID=56

# Optional: Monitoring
STAKE_FARM_ANALYTICS=true
STAKEFARM_WEBHOOK_URL=https://...
```

## 🔐 STEP 5: Treasury Wallet Setup

### A) Treasury Wallet Otomasyonu (Kritik!)
```javascript
// scripts/treasuryManager.js
const { ethers } = require('ethers');

class TreasuryManager {
  constructor() {
    this.treasuryAddress = "0xd88026A648C95780e3056ed98eD60E5105cc4863";
    this.provider = new ethers.providers.JsonRpcProvider(process.env.BSC_RPC_URL);
    
    // Treasury wallet private key (güvenli sakla!)
    this.treasuryWallet = new ethers.Wallet(
      process.env.TREASURY_PRIVATE_KEY, 
      this.provider
    );
  }

  // Reward distribution için otomatik sistem
  async distributeRewards(userAddress, amount, tokenType) {
    // Implementation: Treasury'den user'a reward gönder
  }

  // Unstake için otomatik sistem  
  async processUnstake(userAddress, amount, tokenType) {
    // Implementation: Treasury'den user'a staked amount gönder
  }
}

module.exports = TreasuryManager;
```

## 🧪 STEP 6: Testing & Validation

### A) Contract Testing
```bash
# 1. BSC Testnet'te test et
npx hardhat test --network bscTestnet

# 2. Ana fonksiyonları test et
npm run test:stakefarm
```

### B) Frontend Testing Checklist
- [ ] Wallet connection çalışıyor mu?
- [ ] BNB staking çalışıyor mu?
- [ ] USDT/CAKE approval + staking çalışıyor mu?
- [ ] Reward calculation doğru mu?
- [ ] Claim fonksiyonu çalışıyor mu?
- [ ] Unstake lock period kontrolü çalışıyor mu?
- [ ] Fee'ler doğru treasury'e gidiyor mu?

## 🚀 STEP 7: Production Deployment

### A) Deployment Sırası
```bash
# 1. Smart contract deploy et
npx hardhat run deploy/stakeFarm.js --network bsc

# 2. Contract address'i environment'a ekle
echo "STAKE_FARM_ADDRESS=0x..." >> .env

# 3. Frontend build et
npm run build

# 4. Backend'i restart et (yeni routes için)
pm2 restart hermesaiswap

# 5. Test et
curl https://hermesaiswap.com/api/stakefarm/user-stakes/0x...
```

### B) Post-Deployment Checklist
- [ ] Contract BSCScan'de verify edildi mi?
- [ ] Treasury wallet fonları almaya başladı mı?
- [ ] Frontend /stake page'i açılıyor mu?
- [ ] Navigation menüsünde Stake Farm linki var mı?
- [ ] Mevcut swap fonksiyonları hâlâ çalışıyor mu?
- [ ] API endpoints respond ediyor mu?

## 🔒 STEP 8: Security & Monitoring

### A) Security Checklist
- [ ] Treasury private key güvenli mi?
- [ ] Contract pausable ve sadece owner tarafından mı?
- [ ] Reentrancy protection var mı?
- [ ] Input validation yapılıyor mu?
- [ ] Rate limiting var mı?

### B) Monitoring Setup
```javascript
// monitoring/stakeFarmMonitor.js
const monitor = {
  // TVL tracking
  trackTotalValueLocked: async () => {
    // Implementation
  },
  
  // Unusual activity detection
  detectAnomalies: async () => {
    // Implementation  
  },
  
  // Treasury balance monitoring
  monitorTreasuryBalance: async () => {
    // Implementation
  }
};
```

## 📊 STEP 9: Analytics & Metrics

### A) Key Metrics to Track
- Total Value Locked (TVL)
- Active stakers count
- Daily rewards claimed
- Treasury balance
- Fee collection
- Average stake amount
- Retention rate

### B) Dashboard Integration
```javascript
// Mevcut dashboard'a StakeFarm metrics ekle
const stakeFarmMetrics = {
  tvl: '...',
  activeStakers: '...',
  dailyRewards: '...',
  feeCollection: '...'
};
```

## ✅ SUCCESS CRITERIA

### Fonksiyonel Gereksinimler:
- [x] Mevcut sistem hiç bozulmadı
- [x] StakeFarm tamamen ayrı çalışıyor
- [x] Treasury otomasyonu çalışıyor
- [x] Frontend entegrasyonu tamamlandı
- [x] 99 günlük lock mechanism aktif
- [x] %22 APY hesaplaması doğru
- [x] Fee collection sistemli

### Technical Requirements:
- [x] Gas optimized contract
- [x] Reentrancy protected
- [x] Pausable for emergencies
- [x] Event logging complete
- [x] BSCScan verified
- [x] Frontend responsive
- [x] Error handling robust

---

## 🎯 ÖNEMLİ NOTLAR

1. **Treasury Wallet Management**: 0xd88026A648C95780e3056ed98eD60E5105cc4863 adresi için private key'in güvenli saklanması kritik

2. **Reward Distribution**: Treasury'den kullanıcılara reward dağıtımı için otomatik sistem kurulmalı

3. **Unstake Process**: 99 gün sonra kullanıcılar unstake ettiğinde treasury'den otomatik para gönderimi

4. **Fee Management**: Tüm fee'lerin treasury'e doğru gittiğinden emin ol

5. **Backup Plan**: Herhangi bir sorun durumunda contract'ı pause edebilme yeteneği

Bu rehberi takip ederek mevcut sisteminizi hiç bozmadan StakeFarm modülünü başarıyla entegre edebilirsiniz! 🚀